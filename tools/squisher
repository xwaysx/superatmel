#!/bin/sh
#
# Squish a otapackage for distribution
# Superatmel y Blerfont (Base Cyanogen)
#
OUT_TARGET_HOST=linux-x86
MD5=md5sum
OPTICHARGER=$ANDROID_BUILD_TOP/vendor/superatmel/tools/opticharger
OPTICHARGER_FRAMEWORK=$ANDROID_BUILD_TOP/vendor/superatmel/tools/opticharger_framework
MOD_MDPI=$ANDROID_BUILD_TOP/vendor/superatmel/mods/mdpi/*
MOD_HDPI=$ANDROID_BUILD_TOP/vendor/superatmel/mods/hdpi/*
MOD_DATA=$ANDROID_BUILD_TOP/vendor/superatmel/mods/data/terminales
SPLASH=$ANDROID_BUILD_TOP/vendor/superatmel/mods/data/splash/
QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"
squash_opts="-force-uid 1000 -force-gid 1000 -no-progress -noappend -no-exports -no-recovery"
REPACK=$OUT/repack.d
updater=$REPACK/ota/META-INF/com/google/android/updater-script
MDPI=0
G2D=0
G3D=0
ONE=0
DREAM=0
CONTROLGALLERY=$OUT/system/app/

# Verificación de entorno de desarrollo operativo
if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo "ERROR: $0 solo funciona con un entorno completo de desarrollo. $OUT debe existir."
	exit 1
fi

# Se establece la variable OTAPACKAGE
OTAPACKAGE=$OUT/$TARGET_PRODUCT-ota-$TARGET_BUILD_VARIANT.$LOGNAME.zip
if [ ! -f "$OTAPACKAGE" ]; then
	echo "$OTAPACKAGE no existe!";
	exit 1
fi

# Algunos dispositivos necesitan que xbin esté en squashfs para ahorrar espacio
case "$TARGET_PRODUCT" in
	superatmel_dream_sapphire) WANT_SQUASHFS=1 ;;
	*) WANT_SQUASHFS=0 ;;
esac

# Discriminación dispositivos MDPI o HDPI
case "$TARGET_PRODUCT" in
	superatmel_dream_sapphire) MDPI=1 ;;
	superatmel_one) MDPI=1 ;;
	superatmel_legend) MDPI=1 ;;
	superatmel_hero) MDPI=1 ;;
	superatmel_z71) MDPI=1 ;;
	*) MDPI=0
esac

# Discriminación de que dispositivos llevarán Gallery3D y cuales no
case "$TARGET_PRODUCT" in
	superatmel_buzz) G3D=1 ;;
	superatmel_bravo) G3D=1 ;;
	superatmel_passion) G3D=1 ;;
	superatmel_desire) G3D=1 ;;
	superatmel_hero) G3D=1 ;;
	superatmel_z71) G3D=1 ;;
	*) G3D=0
esac

# Discriminación de que dispositivos llevan Galeria 2D
case "$TARGET_PRODUCT" in
	superatmel_dream_sapphire) G2D=1 ;;
	superatmel_legend) G2D=1 ;;
	*) G2D=0
esac

# Discriminación de que dispositivos llevarán splash
case "$TARGET_PRODUCT" in
	superatmel_one) ONE=1 ;;
	*) ONE=0
esac

# Discriminación de que dispositivos llevan control especial
case "$TARGET_PRODUCT" in
	superatmel_dream_sapphire) DREAM=1 ;;
	*) DREAM=0
esac

# Control de Gallery 2D
if [ "$G2D" -eq 1 ];
then
if [ ! -f $CONTROLGALLERY/Gallery.apk ]
then
	echo " "
	echo " Gallery.apk no esta compilado, ejecuta make Gallery y make otapackage"
	echo " "
	exit 1
else
	echo " "
	echo " Control de Gallery.apk correcto"
	echo " "
fi
fi

# Si se requiere squashfs se verifica si existe el comando y su versión
if [ "$WANT_SQUASHFS" -eq 1 ]; then
	fatal=0
	MKSQUASHFS_VER_REQ=4
	if type mksquashfs >/dev/null 2>&1; then
		if mksquashfs -version | grep -q "version $MKSQUASHFS_VER_REQ"; then :; else
			echo
			echo "ERROR: mksquashfs debe estar al menos en versión $MKSQUASHFS_VER_REQ para este build."
			fatal=1
		fi
	else
		echo
		echo "ERROR: $TARGET_PRODUCT requiere mksquashfs."
		fatal=1
	fi

	if [ "$fatal" -ne 0 ]; then
		echo
		echo "       Paquete sin optimizar está disponible en"
		echo "         $OTAPACKAGE"
		exit $fatal
	fi
fi

# Elimina cualquier directorio de un trabajo antiguo
printf "Limpiando entorno..."
rm -rf $REPACK
mkdir -p $REPACK
echo

# Descomprime el otapackage y ejecuta opticharge en todos los apks
mkdir $REPACK/ota
(
cd $REPACK/ota
printf "Desempaquetando $OTAPACKAGE..."
unzip $QUIET $OTAPACKAGE
echo

# Copiado de archivos base mdpi o hdpi
mkdir $REPACK/ota/data
if [ "$MDPI" -eq 1 ]; then
	cp -rf $MOD_MDPI $REPACK/ota/
else
	cp -rf $MOD_HDPI $REPACK/ota/
fi

# Copiado de archivos base data
cp -rf $MOD_DATA/common/* $REPACK/ota/data/
case "$TARGET_PRODUCT" in
	superatmel_bravo) cp -rf $MOD_DATA/bravo/* $REPACK/ota/ ;;
	superatmel_buzz) cp -rf $MOD_DATA/buzz/* $REPACK/ota/ ;;
	superatmel_dream_sapphire) cp -rf $MOD_DATA/dream_sapphire/* $REPACK/ota/ ;;
	superatmel_hero) cp -rf $MOD_DATA/hero/* $REPACK/ota/ ;;
	superatmel_legend) cp -rf $MOD_DATA/legend/* $REPACK/ota/ ;;
	superatmel_one) cp -rf $MOD_DATA/one/* $REPACK/ota/ ;;
	superatmel_passion) cp -rf $MOD_DATA/passion/* $REPACK/ota/ ;;
	superatmel_z71) cp -rf $MOD_DATA/z71/* $REPACK/ota/ ;;
	*) printf "REVISA EL PRODUCT QUE ESTÁS COMPILANDO, NO TIENE CONFIGURACIÓN DE COPIADO DE ""DATA"""
esac

# Necesario para GeeksPhone One
if [ "$ONE" -eq 1 ]; then
	cp -rf $SPLASH/one/splash.img $REPACK/ota/
	rm -rf $REPACK/ota/data/extra/com.koushikdutta.rommanager.apk
	mv  $REPACK/ota/system/app/Maps.apk $REPACK/ota/data/app/com.android.apps.maps.apk
else
	echo " "
	echo " No es un One"
	echo " "
fi

# Necesario para Dream&Magic
if [ "$DREAM" -eq 1 ]; then
	mv  $REPACK/ota/system/app/Maps.apk $REPACK/ota/data/app/com.android.apps.maps.apk
	echo " "
	echo " No es un Dream/Magic"
	echo " "
fi

# Renombrado Gallery dependiendo del dispositivo que sea
if [ "$G3D" -eq 1 ]; then
	mv $REPACK/ota/system/app/Gallery.apk $REPACK/ota/system/app/Gallery.app
	echo " "
	echo " Activado Gallery 3D y desactivado Gallery 2D"
	echo " "
else
	echo " "
fi

# Renombrado Gallery dependiendo del dispositivo que sea
if [ "$G2D" -eq 1 ]; then
	mv $REPACK/ota/system/app/Gallery3D.apk $REPACK/ota/system/app/Gallery3D.app
	echo " Activado Gallery 2D y desactivado Gallery 3D"
	echo " "
else
	echo " "
fi

echo
cd $REPACK/ota/system/framework
# Ejecuta opticharger especial sobre el framework para copiar las imagenes modificadas de la rom dentro de él
$OPTICHARGER_FRAMEWORK framework-res.apk
#Ejecuta opticharger sobre el resto de apks de la rom
cd $REPACK/ota/system/app
find ./ -name \*.apk | xargs  --max-args=1 --max-procs=`grep 'processor' /proc/cpuinfo | wc -l`  $OPTICHARGER
)

# Modificaciones de SuperBler
rm -rf $REPACK/ota/system/app/CMStats.apk
rm -rf $REPACK/ota/system/app/CMWallpapers.apk
rm -rf $REPACK/ota/system/app/Protips.apk
rm -rf $REPACK/ota/system/app/Provision.apk
rm -rf $REPACK/ota/system/app/QuickSearchBox.apk
rm -rf $REPACK/ota/system/app/SpareParts.apk
rm -rf $REPACK/ota/system/bin/backuptool.sh
rm -rf $REPACK/ota/system/etc/CHANGELOG-CM.txt
rm -rf $REPACK/ota/system/etc/init.d
mv $REPACK/ota/system/app/Development.apk $REPACK/ota/system/app/Development.app
mv $REPACK/ota/system/app/FileManager.apk $REPACK/ota/system/app/FileManager.app
mv $REPACK/ota/system/app/Stk.apk $REPACK/ota/system/app/Stk.app

if [ "$WANT_SQUASHFS" -eq 1 ]; then
	# Recoloca su
	cp -a $REPACK/ota/system/xbin $REPACK/_xbin/
	rm -f $REPACK/_xbin/su $REPACK/ota/system/bin/su
	mv $REPACK/ota/system/xbin/su $REPACK/ota/system/bin/su
	chmod -R 555 $REPACK/_xbin/*

	# Crea enlaces simbolicos para su y busybox (updater-script no puede funcionar con el sistema de ficheros squashfs).
	ln -s ../bin/su $REPACK/_xbin/su
	for link in `sed -n -e's/,//g' -e'/symlink(.*busybox/,/xbin.*);/p' $updater | tr '"' '\n' | sed -n -e'\,/system/xbin/,s,/system/xbin/,,p'`
	do
		ln -s busybox $REPACK/_xbin/$link
	done

	# Crea el squashfs con un nuevo y mejorado linkado simbolico!
	mksquashfs $REPACK/_xbin/* $REPACK/_xbin.sqf $squash_opts
	rm -rf $REPACK/ota/system/xbin/*
	mv $REPACK/_xbin.sqf $REPACK/ota/system/xbin/xbin.sqf
	chmod 444 $REPACK/ota/system/xbin/xbin.sqf

	# Borrado lo referente a xbin y corregido updater-script
	sed -i -e's,system/xbin/su,system/bin/su,g' -e'/xbin/d' $updater
fi

# Corregir build.prop
sed -i \
	-e '/ro\.kernel\.android\.checkjni/d' \
	-e '/ro\.build\.type/s/eng/user/' \
	$REPACK/ota/system/build.prop

# Eliminar binarios innecesarios
( cd $REPACK/ota/system/bin; echo $DELETE_BINS | xargs rm -f; )

# Eliminar drivers inalambricos
rm -rf $REPACK/ota/system/lib/modules/*/kernel/drivers/net

# No se necesita recovery (en caso de existir)
rm -rf $REPACK/ota/recovery

# Strip modulos
find $REPACK/ota/system/lib/modules -name "*.ko" -print0 | xargs -0 arm-eabi-strip --strip-unneeded

# Determinar como se llamará el paquete firmado
MODVERSION=`sed -n -e'/ro\.modversion/s/^.*SuperGinger-//p' $REPACK/ota/system/build.prop`
: ${MODVERSION:=test}
OUTFILE=$OUT/SuperGinger-$MODVERSION.zip

# Empaquetar y firmar
printf "Comprimiendo..."
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip . )
echo
printf "Firmando..."
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx512m \
	-jar $ANDROID_BUILD_TOP/out/host/$OUT_TARGET_HOST/framework/signapk.jar \
	-w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
	$REPACK/update.zip $OUTFILE
echo
printf "Limpiando la casa..."
rm -rf $REPACK
echo

# Crear md5 para el paquete firmado
(
img=`basename $OUTFILE`
cd `dirname $OUTFILE`
$MD5 $img >$img.md5sum
echo
echo "Paquete creado: $OUTFILE"
cat $img.md5sum
echo
)

exit 0
